import{dataArray,groups}from './data.js';$(document).ready(function(){$('#generateButton').click(function(){generateOutput()});$('#copyButton').click(function(){copyToClipboard()});if(Cookies.get('banNums')){$('#ChooseBans').val(Cookies.get('banNums'))}if(Cookies.get('team1side')){$('#team1side').val(Cookies.get('team1side'))}if(Cookies.get('winner')){$('#winner').val(Cookies.get('winner'))}for(let i = 0;i <= 99;i++){$('#minutes').append($('<option>',{value: i.toString().padStart(2,'0'),text: i.toString().padStart(2,'0')}))}for(let i = 0;i < 60;i++){$('#seconds').append($('<option>',{value: i.toString().padStart(2,'0'),text: i.toString().padStart(2,'0')}))}$('#inputs-container').empty();let counter = 1;groups.forEach(group =>{const BPDiv = $('<div>').attr('id',`BPDiv${counter++}`).addClass('BPDiv');const groupLabel = $('<b>').text(group.label).attr('id',group.id).addClass('LineB');BPDiv.append(groupLabel);for(let i = 0;i < 5;i++){const input = $('<input>').attr('type','text').attr('placeholder',`${group.prefix}${i + 1}`).attr('id',`${group.prefix}${i + 1}`).addClass('txtBorder txtLine').on('input',handleInput);BPDiv.append(input)}$('#inputs-container').append(BPDiv)});checkBanNum();$('#ChooseBans').change(function(){checkBanNum()});$('#isUltimateBattle').change(function(){checkIsUltimateBattle()});$('#ChooseBans').change(function(){Cookies.set('banNums',$(this).val(),{expires: 7})});$('#team1side').change(function(){Cookies.set('team1side',$(this).val(),{expires: 7})});$('#winner').change(function(){Cookies.set('winner',$(this).val(),{expires: 7})});let currentInput = null;let currentIndex = -1;let suggestionsData = [];function handleInput(event){const input = $(event.target);currentInput = input[0];const value = input.val().toLowerCase();const suggestionsContainer = getOrCreateSuggestionsContainer(input);suggestionsContainer.empty();currentIndex = -1;if(value){const filteredData = dataArray.filter(item => item.text.toLowerCase().includes(value)|| item.alias.toLowerCase().includes(value));const uniqueItems ={};filteredData.forEach(item =>{if(!uniqueItems[item.text]){uniqueItems[item.text] = item}});suggestionsData = Object.values(uniqueItems);suggestionsData.forEach((item,index)=>{const suggestionItem = $('<div>').addClass('suggestion-item').text(item.text).on('click',()=> selectSuggestion(item,input,suggestionsContainer)).on('mouseover',()=> highlightSuggestion(index)).on('mouseout',()=> removeHighlightSuggestion(index));suggestionsContainer.append(suggestionItem)});updateSuggestionsPosition(input,suggestionsContainer)}}function selectSuggestion(item,input,suggestionsContainer){input.val(item.text);input.data('value',item.value);suggestionsContainer.empty()}function getOrCreateSuggestionsContainer(input){let suggestionsContainer = input.next('.autocomplete-suggestions');if(suggestionsContainer.length === 0){suggestionsContainer = $('<div>').addClass('autocomplete-suggestions');input.after(suggestionsContainer)}return suggestionsContainer}function updateSuggestionsPosition(input,suggestionsContainer){const rect = input[0].getBoundingClientRect();suggestionsContainer.css({left: `${rect.left}px`,top: `${rect.bottom}px`,width: `${rect.width}px`})}function getSelectedValue(input){return input.data('value')}$(document).on('keydown',function(event){if(currentInput && $(currentInput).next('.autocomplete-suggestions').is(':visible')){const suggestionsContainer = $(currentInput).next('.autocomplete-suggestions');const suggestionItems = suggestionsContainer.find('.suggestion-item');if(event.key === 'ArrowDown'){currentIndex =(currentIndex + 1)% suggestionsData.length;highlightSuggestion(currentIndex);scrollIfNeeded(suggestionsContainer)}else if(event.key === 'ArrowUp'){currentIndex =(currentIndex - 1 + suggestionsData.length)% suggestionsData.length;highlightSuggestion(currentIndex);scrollIfNeeded(suggestionsContainer)}else if(event.key === 'Enter'){if(currentIndex !== -1){const selectedItem = suggestionsData[currentIndex];selectSuggestion(selectedItem,$(currentInput),suggestionsContainer)}}}});function highlightSuggestion(index){const suggestionsContainer = $(currentInput).next('.autocomplete-suggestions');const suggestionItems = suggestionsContainer.find('.suggestion-item');suggestionItems.removeClass('highlighted');suggestionItems.eq(index).addClass('highlighted')}function removeHighlightSuggestion(index){const suggestionsContainer = $(currentInput).next('.autocomplete-suggestions');const suggestionItems = suggestionsContainer.find('.suggestion-item');suggestionItems.eq(index).removeClass('highlighted')}function scrollIfNeeded(suggestionsContainer){const suggestionItems = suggestionsContainer.find('.suggestion-item');const itemHeight = suggestionItems.first().outerHeight();const visibleItems = Math.floor(suggestionsContainer.height()/ itemHeight);const topItem = suggestionItems.eq(currentIndex);const bottomItem = suggestionItems.eq(currentIndex + visibleItems - 1);if(topItem.position().top < 0){suggestionsContainer.scrollTop(suggestionsContainer.scrollTop()+ topItem.position().top)}else if(bottomItem.position().top > suggestionsContainer.height()){suggestionsContainer.scrollTop(suggestionsContainer.scrollTop()+ bottomItem.position().top - suggestionsContainer.height())}}function generateOutput(){const output = [];const team1side = $('#team1side').val();const team2side = team1side === 'blue' ? 'red' : 'blue';const minutes = $('#minutes').val();const seconds = $('#seconds').val();const winner = $('#winner').val();const t1h = Array.from({length: 5},(_,i)=> getValueById(`t1h${i + 1}`));const t2h = Array.from({length: 5},(_,i)=> getValueById(`t2h${i + 1}`));const t1b = Array.from({length: 5},(_,i)=> getValueById(`t1b${i + 1}`));const t2b = Array.from({length: 5},(_,i)=> getValueById(`t2b${i + 1}`));output.push(`        |team1side=${team1side}|team2side=${team2side}|length=${minutes}:${seconds}|winner=${winner}`);output.push(`        <!-- Hero picks -->`);output.push(`        |t1h1=${t1h[0]}|t1h2=${t1h[1]}|t1h3=${t1h[2]}|t1h4=${t1h[3]}|t1h5=${t1h[4]}`);output.push(`        |t2h1=${t2h[0]}|t2h2=${t2h[1]}|t2h3=${t2h[2]}|t2h4=${t2h[3]}|t2h5=${t2h[4]}`);const choose = Number($("#ChooseBans").val());if(!checkIsUltimateBattle()){output.push(`        <!-- Hero bans -->`);switch(choose){case 4: output.push(`        |t1b1=${t1b[0]}|t1b2=${t1b[1]}|t1b3=${t1b[2]}|t1b4=${t1b[3]}`);output.push(`        |t2b1=${t2b[0]}|t2b2=${t2b[1]}|t2b3=${t2b[2]}|t2b4=${t2b[3]}`);break;case 5: output.push(`        |t1b1=${t1b[0]}|t1b2=${t1b[1]}|t1b3=${t1b[2]}|t1b4=${t1b[3]}|t1b5=${t1b[4]}`);output.push(`        |t2b1=${t2b[0]}|t2b2=${t2b[1]}|t2b3=${t2b[2]}|t2b4=${t2b[3]}|t2b5=${t2b[4]}`);break;default: break}}$('#output').text(output.join('\n'));copyToClipboard()}function getValueById(inputId){const inputText = $(`#${inputId}`).val().toLowerCase();const item = dataArray.find(item => item.text.toLowerCase().includes(inputText));return item ? item.value : ''}function copyToClipboard(){const outputText = $('#output').text();const textArea = $('<textarea>').val(outputText).appendTo('body');textArea.select();document.execCommand('copy');textArea.remove()}$('input').click(function(){$(this).select()});function checkBanNum(){const banNum = $('#ChooseBans').val();if(banNum == '4'){$('#t1b5').hide();$('#t2b5').hide()}else{$('#t1b5').show();$('#t2b5').show()}}function checkIsUltimateBattle(){const isChecked = $("#isUltimateBattle").prop('checked');if(isChecked){$('#BPDiv3').hide();$('#BPDiv4').hide()}else{$('#BPDiv3').show();$('#BPDiv4').show()}return isChecked}$('#rememberMe').change(function(){$('#clearCookies').click(function(){Cookies.remove('banNums');Cookies.remove('team1side');Cookies.remove('winner')})})});