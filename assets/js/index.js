import{dataArray}from './data.js';
// import { dataArray } from './newData.js';

const groups = [
	{ label: 'Team1Picks：', prefix: 't1h', id: "Label1" },
	{ label: 'Team2Picks：', prefix: 't2h', id: "Label2" },
	{ label: 'Team1Bans：', prefix: 't1b', id: "Label3" },
	{ label: 'Team2Bans：', prefix: 't2b', id: "Label4" }
];

$(document).ready(
	function () {
		$('#generateButton').click(function () { generateOutput() }); $('#copyButton').click(function () { copyResult() }); if (Cookies.get('banNums')) { $('#ChooseBans').val(Cookies.get('banNums')) } if (Cookies.get('team1side')) { $('#team1side').val(Cookies.get('team1side')) } if (Cookies.get('winner')) { $('#winner').val(Cookies.get('winner')) }
		for (let i = 0; i <= 99; i++) { $('#minutes').append($('<option>', { value: i.toString().padStart(2, '0'), text: i.toString().padStart(2, '0') })) }
		for (let i = 0; i < 60; i++) { $('#seconds').append($('<option>', { value: i.toString().padStart(2, '0'), text: i.toString().padStart(2, '0') })) } $('#inputs-container').empty();
		let counter = 1; groups.forEach(group => { const BPDiv = $('<div>').attr('id', `BPDiv${counter++}`).addClass('BPDiv'); const groupLabel = $('<b>').text(group.label).attr('id', group.id).addClass('LineB'); BPDiv.append(groupLabel); for (let i = 0; i < 5; i++) { const input = $('<input>').attr('type', 'text').attr('placeholder', `${group.prefix}${i + 1}`).attr('id', `${group.prefix}${i + 1}`).addClass('txtBorder txtLine').on('input', handleInput); BPDiv.append(input) } $('#inputs-container').append(BPDiv) }); checkBanNum(); $('#ChooseBans').change(function () { checkBanNum() }); $('#isUltimateBattle').change(function () { if (checkIsUltimateBattle()) { $('.checkbox1').not('#isUltimateBattle').prop('checked', false); $('#BPDiv1').show(); $('#BPDiv2').show(); $('#BPDiv3').hide(); $('#BPDiv4').hide() } else { showAll() } }); $('#isOnlyBans').change(function () { if (checkIsOnlyBans()) { $('.checkbox1').not('#isOnlyBans').prop('checked', false); $('#BPDiv1').hide(); $('#BPDiv2').hide(); $('#BPDiv3').show(); $('#BPDiv4').show() } else { showAll() } }); $('#isOnlyPicks').change(function () { if (checkIsOnlyPicks()) { $('.checkbox1').not('#isOnlyPicks').prop('checked', false); $('#BPDiv1').show(); $('#BPDiv2').show(); $('#BPDiv3').hide(); $('#BPDiv4').hide() } else { showAll() } }); $('#isOnlyBanPicks').change(function () { if (checkIsOnlyBanPicks()) { $('.checkbox1').not('#isOnlyBanPicks').prop('checked', false) } showAll() }); $('#ChooseBans').change(function () { Cookies.set('banNums', $(this).val(), { expires: 7 }) }); $('#team1side').change(function () { Cookies.set('team1side', $(this).val(), { expires: 7 }) }); $('#winner').change(function () { Cookies.set('winner', $(this).val(), { expires: 7 }) }); $(document).on('click', function () { checkSuggestionsHeight() }); let currentInput = null; let currentIndex = -1; let suggestionsData = []; function handleInput(event) { const input = $(event.target); currentInput = input[0]; const value = input.val().toLowerCase(); const suggestionsContainer = getOrCreateSuggestionsContainer(input); suggestionsContainer.empty(); currentIndex = -1; if (value) { const filteredData = dataArray.filter(item => item.text.toLowerCase().includes(value) || item.alias.toLowerCase().includes(value)); const uniqueItems = {}; filteredData.forEach(item => { if (!uniqueItems[item.text]) { uniqueItems[item.text] = item } }); suggestionsData = Object.values(uniqueItems); suggestionsData.forEach((item, index) => { const suggestionItem = $('<div>').addClass('suggestion-item').text(item.text).on('click', () => selectSuggestion(item, input, suggestionsContainer)).on('mouseover', () => highlightSuggestion(index)).on('mouseout', () => removeHighlightSuggestion(index)); suggestionsContainer.append(suggestionItem) }); updateSuggestionsPosition(input, suggestionsContainer) } } function selectSuggestion(item, input, suggestionsContainer) { input.val(item.text); input.data('value', item.value); suggestionsContainer.empty() } function getOrCreateSuggestionsContainer(input) { let suggestionsContainer = input.next('.autocomplete-suggestions'); let inputId = input.attr('id'); if (suggestionsContainer.length === 0) { suggestionsContainer = $('<div>').attr("id", `autocomplete-suggestions-${inputId}`).addClass('autocomplete-suggestions'); input.after(suggestionsContainer) } return suggestionsContainer } function updateSuggestionsPosition(input, suggestionsContainer) { const rect = input[0].getBoundingClientRect(); suggestionsContainer.css({ left: `${rect.left}px`, top: `${rect.bottom}px`, width: `${rect.width}px` }) } function getSelectedValue(input) { return input.data('value') } $(document).on('keydown', function (event) { if (currentInput && $(currentInput).next('.autocomplete-suggestions').is(':visible')) { const suggestionsContainer = $(currentInput).next('.autocomplete-suggestions'); const suggestionItems = suggestionsContainer.find('.suggestion-item'); if (event.key === 'ArrowDown') { currentIndex = (currentIndex + 1) % suggestionsData.length; highlightSuggestion(currentIndex); scrollIfNeeded(suggestionsContainer) } else if (event.key === 'ArrowUp') { if (currentIndex != -1) { currentIndex = (currentIndex - 1 + suggestionsData.length) % suggestionsData.length } else { currentIndex = suggestionsData.length - 1 } highlightSuggestion(currentIndex); scrollIfNeeded(suggestionsContainer) } else if (event.key === 'Enter') { if (currentIndex !== -1) { const selectedItem = suggestionsData[currentIndex]; selectSuggestion(selectedItem, $(currentInput), suggestionsContainer) } suggestionsContainer.remove() } } }); function highlightSuggestion(index) { const suggestionsContainer = $(currentInput).next('.autocomplete-suggestions'); const suggestionItems = suggestionsContainer.find('.suggestion-item'); suggestionItems.removeClass('highlighted'); suggestionItems.eq(index).addClass('highlighted') } function removeHighlightSuggestion(index) { const suggestionsContainer = $(currentInput).next('.autocomplete-suggestions'); const suggestionItems = suggestionsContainer.find('.suggestion-item'); suggestionItems.eq(index).removeClass('highlighted') } function scrollIfNeeded(suggestionsContainer) { const suggestionItems = suggestionsContainer.find('.suggestion-item'); const itemHeight = suggestionItems.first().outerHeight(); const visibleItems = Math.floor(suggestionsContainer.height() / itemHeight); const topItem = suggestionItems.eq(currentIndex); const bottomItem = suggestionItems.eq(currentIndex + visibleItems - 1); if (topItem.length > 0 && bottomItem.length > 0) { const containerHeight = suggestionsContainer.height(); const containerScrollTop = suggestionsContainer.scrollTop(); const containerScrollHeight = suggestionsContainer[0].scrollHeight; if (containerScrollTop + containerHeight >= containerScrollHeight - 5) { suggestionsContainer.scrollTop(containerScrollHeight) } else { const topItemPosition = topItem.position(); const bottomItemPosition = bottomItem.position(); if (topItemPosition && topItemPosition.top < 0) { suggestionsContainer.scrollTop(suggestionsContainer.scrollTop() + topItemPosition.top) } if (bottomItemPosition && bottomItemPosition.top > containerHeight) { suggestionsContainer.scrollTop(suggestionsContainer.scrollTop() + bottomItemPosition.top - containerHeight) } } } } function generateOutput() { const output = []; const team1side = $('#team1side').val(); const team2side = team1side === 'blue' ? 'red' : 'blue'; const minutes = $('#minutes').val(); const seconds = $('#seconds').val(); const winner = $('#winner').val(); const t1h = Array.from({ length: 5 }, (_, i) => getValueById(`t1h${i + 1}`)); const t2h = Array.from({ length: 5 }, (_, i) => getValueById(`t2h${i + 1}`)); const t1b = Array.from({ length: 5 }, (_, i) => getValueById(`t1b${i + 1}`)); const t2b = Array.from({ length: 5 }, (_, i) => getValueById(`t2b${i + 1}`)); function outputGameResult() { if (checkIsGameInProgress()) { output.push(`        |team1side=${team1side}|team2side=${team2side}|length=|winner=`) } else { output.push(`        |team1side=${team1side}|team2side=${team2side}|length=${minutes}:${seconds}|winner=${winner}`) } } function outputHeroPicks(t1h, t2h) { output.push(`        <!-- Hero picks -->`); output.push(`        |t1h1=${t1h[0]}|t1h2=${t1h[1]}|t1h3=${t1h[2]}|t1h4=${t1h[3]}|t1h5=${t1h[4]}`); output.push(`        |t2h1=${t2h[0]}|t2h2=${t2h[1]}|t2h3=${t2h[2]}|t2h4=${t2h[3]}|t2h5=${t2h[4]}`) } function outputHeroBans(t1b, t2b) { output.push(`        <!-- Hero bans -->`); switch (Number($("#ChooseBans").val())) { case 4: output.push(`        |t1b1=${t1b[0]}|t1b2=${t1b[1]}|t1b3=${t1b[2]}|t1b4=${t1b[3]}`); output.push(`        |t2b1=${t2b[0]}|t2b2=${t2b[1]}|t2b3=${t2b[2]}|t2b4=${t2b[3]}`); break; case 5: output.push(`        |t1b1=${t1b[0]}|t1b2=${t1b[1]}|t1b3=${t1b[2]}|t1b4=${t1b[3]}|t1b5=${t1b[4]}`); output.push(`        |t2b1=${t2b[0]}|t2b2=${t2b[1]}|t2b3=${t2b[2]}|t2b4=${t2b[3]}|t2b5=${t2b[4]}`); break; default: break } } if (checkIsUltimateBattle()) { outputGameResult(); outputHeroPicks(t1h, t2h) } if (checkIsOnlyPicks()) { outputHeroPicks(t1h, t2h) } if (checkIsOnlyBans()) { outputHeroBans(t1b, t2b) } if (checkIsOnlyBanPicks()) { outputHeroPicks(t1h, t2h); outputHeroBans(t1b, t2b) } if (noChoose()) { outputGameResult(); outputHeroPicks(t1h, t2h); outputHeroBans(t1b, t2b) } $('#output').text(output.join('\n')); copyResult() } function getValueById(inputId) { const inputText = $(`#${inputId}`).val().toLowerCase(); const item = dataArray.find(item => item.text.toLowerCase().includes(inputText)); return item ? item.value : '' } function copyResult() { const outputText = $('#output').text(); const textArea = $('<textarea>').val(outputText).appendTo('body'); textArea.select(); document.execCommand('copy'); textArea.remove() } let checkSuggestionsHeight = function () { const suggestionsBox = $('.autocomplete-suggestions'); if (suggestionsBox.length > 0 && suggestionsBox.height() === 0) { suggestionsBox.remove() } }; $('input').click(function () { $(this).select() }); function checkBanNum() { const banNum = $('#ChooseBans').val(); if (banNum == '4') { $('#t1b5').hide(); $('#t2b5').hide() } else { $('#t1b5').show(); $('#t2b5').show() } } function checkIsUltimateBattle() { return $("#isUltimateBattle").prop('checked') } function checkIsOnlyBans() { return $("#isOnlyBans").prop('checked') } function checkIsOnlyPicks() { return $("#isOnlyPicks").prop('checked') } function checkIsOnlyBanPicks() { return $("#isOnlyBanPicks").prop('checked') } function checkIsGameInProgress() { return $("#isGameInProgress").prop('checked') } function showAll() { $('#BPDiv1').show(); $('#BPDiv2').show(); $('#BPDiv3').show(); $('#BPDiv4').show() } function noChoose() { return !checkIsUltimateBattle() && !checkIsOnlyBans() && !checkIsOnlyPicks() && !checkIsOnlyBanPicks() } $('#clearCookies').click(function () { Cookies.remove('banNums'); Cookies.remove('team1side'); Cookies.remove('winner'); location.reload() })
	}
);
