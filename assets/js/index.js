import { dataArray } from './data.js';
let currentInput = null;let currentIndex = -1;let suggestionsData = [];const group = [{label: 'Team1Picks:',prefix: 't1h',id: "Label1"},{label: 'Team2Picks:',prefix: 't2h',id: "Label2"},{label: 'Team1Bans:',prefix: 't1b',id: "Label3"},{label: 'Team2Bans:',prefix: 't2b',id: "Label4"}];const group1 = [{label: 'Team2Picks:',prefix: 't2h',id: "Label1"},{label: 'Team1Picks:',prefix: 't1h',id: "Label2"},{label: 'Team2Bans:',prefix: 't2b',id: "Label3"},{label: 'Team1Bans:',prefix: 't1b',id: "Label4"}];

$(document).ready(function () {
	$('#generateButton').click(function () { generateOutput() }); $('#copyButton').click(function () { copyResult() }); if (Cookies.get('banNums')) { $('#ChooseBans').val(Cookies.get('banNums')) } if (Cookies.get('team1side')) { $('#team1side').val(Cookies.get('team1side')) } if (Cookies.get('winner')) { $('#winner').val(Cookies.get('winner')) } checkCookieForChoose(); renderInputGroups();
	for (let i = 0; i <= 99; i++) { $('#minutes').append($('<option>', { value: i.toString().padStart(2, '0'), text: i.toString().padStart(2, '0') })) }
	for (let i = 0; i < 60; i++) { $('#seconds').append($('<option>', { value: i.toString().padStart(2, '0'), text: i.toString().padStart(2, '0') })) }
	$('#ChooseBans').change(function () { ShowBanNum() }); $('#isChangeSide').change(function () { if ($(this).prop('checked')) { if ($('#team1side').val() === 'blue') { $('#team1side').val('red').trigger('change') } } else { if ($('#team1side').val() === 'red') { $('#team1side').val('blue').trigger('change') } } renderInputGroups(); checkToolbox() }); 
	$('#isUltimateBattle').change(function () { if (checkIsUltimateBattle()) { $('.checkbox1').not('#isUltimateBattle').prop('checked', false); $('#BPDiv1').show(); $('#BPDiv2').show(); $('#BPDiv3').hide(); $('#BPDiv4').hide() } else { showAll() } checkCookieForChoose() }); $('#isOnlyBans').change(function () { if (checkIsOnlyBans()) { $('.checkbox1').not('#isOnlyBans').prop('checked', false); $('#BPDiv1').hide(); $('#BPDiv2').hide(); $('#BPDiv3').show(); $('#BPDiv4').show() } else { showAll() } checkCookieForChoose() }); $('#isOnlyPicks').change(function () { if (checkIsOnlyPicks()) { $('.checkbox1').not('#isOnlyPicks').prop('checked', false); $('#BPDiv1').show(); $('#BPDiv2').show(); $('#BPDiv3').hide(); $('#BPDiv4').hide() } else { showAll() } checkCookieForChoose() }); $('#isOnlyBanPicks').change(function () { if (checkIsOnlyBanPicks()) { $('.checkbox1').not('#isOnlyBanPicks').prop('checked', false) } showAll(); checkCookieForChoose() }); $('#ChooseBans').change(function () { Cookies.set('banNums', $(this).val(), { expires: 7 }) }); $('#team1side').change(function () { Cookies.set('team1side', $(this).val(), { expires: 7 }) }); $('#winner').change(function () { Cookies.set('winner', $(this).val(), { expires: 7 }) }); $('#isNewFormat').change(function () { Cookies.set('isNewFormat', $('#isNewFormat').prop('checked') ? 'true' : 'false', { expires: 7 }) }); $('#isChangeSide').change(function () { Cookies.set('isChangeSide', $('#isChangeSide').prop('checked') ? 'true' : 'false', { expires: 7 }) }); 
	$(document).on('click', function () { checkSuggestionsHeight() }); $(document).on('keydown', function (event) { if (currentInput && $(currentInput).next('.autocomplete-suggestions').is(':visible')) { const suggestionsContainer = $(currentInput).next('.autocomplete-suggestions'); if (event.key === 'ArrowDown') { currentIndex = (currentIndex + 1) % suggestionsData.length; highlightSuggestion(currentIndex); scrollIfNeeded(suggestionsContainer) } else if (event.key === 'ArrowUp') { if (currentIndex != -1) { currentIndex = (currentIndex - 1 + suggestionsData.length) % suggestionsData.length } else { currentIndex = suggestionsData.length - 1 } highlightSuggestion(currentIndex); scrollIfNeeded(suggestionsContainer) } else if (event.key === 'Enter') { if (currentIndex !== -1) { const selectedItem = suggestionsData[currentIndex]; selectSuggestion(selectedItem, $(currentInput), suggestionsContainer) } suggestionsContainer.remove() } } }); let checkSuggestionsHeight = function () { const suggestionsBox = $('.autocomplete-suggestions'); if (suggestionsBox.length > 0 && suggestionsBox.height() === 0) { suggestionsBox.remove() } }; $('input').click(function () { $(this).select() }); $('#clearCookies').click(function () { Cookies.remove('banNums'); Cookies.remove('team1side'); Cookies.remove('winner'); Cookies.remove('isNewFormat'); Cookies.remove('isChangeSide'); location.reload() })
});
function renderInputGroups(){$('#inputs-container').empty();let groups = [];let counter = 1;let isChangeSide = $("#isChangeSide").prop('checked');if(isChangeSide){groups = group1}else{groups = group}groups.forEach(group =>{const BPDiv = $('<div>').attr('id',`BPDiv${counter++}`).addClass('BPDiv');const groupLabel = $('<b>').text(group.label).attr('id',group.id).addClass('LineB');BPDiv.append(groupLabel);for(let i = 0;i < 5;i++){const input = $('<input>').attr('type','text').attr('placeholder',`${group.prefix}${i + 1}`).attr('id',`${group.prefix}${i + 1}`).addClass('txtBorder txtLine').on('input',showAutocompleteSuggestions);BPDiv.append(input)}$('#inputs-container').append(BPDiv)});bindInputClickSelect();ShowBanNum()}function showAutocompleteSuggestions(event){const input = $(event.target);currentInput = input[0];const value = input.val().toLowerCase();const suggestionsContainer = getOrCreateSuggestionsContainer(input);suggestionsContainer.empty();currentIndex = -1;if(value){const filteredData = dataArray.filter(item => item.text.toLowerCase().includes(value)|| item.alias.toLowerCase().includes(value));const uniqueItems ={};filteredData.forEach(item =>{if(!uniqueItems[item.text]){uniqueItems[item.text] = item}});suggestionsData = Object.values(uniqueItems);suggestionsData.forEach((item,index)=>{const suggestionItem = $('<div>').addClass('suggestion-item').text(item.text).on('click',()=> selectSuggestion(item,input,suggestionsContainer)).on('mouseover',()=> highlightSuggestion(index)).on('mouseout',()=> removeHighlightSuggestion(index));suggestionsContainer.append(suggestionItem)});updateSuggestionsPosition(input,suggestionsContainer)}}function selectSuggestion(item,input,suggestionsContainer){input.val(item.text);input.data('value',item.value);suggestionsContainer.empty()}function getOrCreateSuggestionsContainer(input){let suggestionsContainer = input.next('.autocomplete-suggestions');let inputId = input.attr('id');if(suggestionsContainer.length === 0){suggestionsContainer = $('<div>').attr("id",`autocomplete-suggestions-${inputId}`).addClass('autocomplete-suggestions');input.after(suggestionsContainer)}return suggestionsContainer}function updateSuggestionsPosition(input,suggestionsContainer){const rect = input[0].getBoundingClientRect();suggestionsContainer.css({left: `${rect.left}px`,top: `${rect.bottom}px`,width: `${rect.width}px`})}function getSelectedValue(input){return input.data('value')}function highlightSuggestion(index){const suggestionsContainer = $(currentInput).next('.autocomplete-suggestions');const suggestionItems = suggestionsContainer.find('.suggestion-item');suggestionItems.removeClass('highlighted');suggestionItems.eq(index).addClass('highlighted')}function removeHighlightSuggestion(index){const suggestionsContainer = $(currentInput).next('.autocomplete-suggestions');const suggestionItems = suggestionsContainer.find('.suggestion-item');suggestionItems.eq(index).removeClass('highlighted')}function scrollIfNeeded(suggestionsContainer){const suggestionItems = suggestionsContainer.find('.suggestion-item');const itemHeight = suggestionItems.first().outerHeight();const visibleItems = Math.floor(suggestionsContainer.height()/ itemHeight);const topItem = suggestionItems.eq(currentIndex);const bottomItem = suggestionItems.eq(currentIndex + visibleItems - 1);if(topItem.length > 0 && bottomItem.length > 0){const containerHeight = suggestionsContainer.height();const containerScrollTop = suggestionsContainer.scrollTop();const containerScrollHeight = suggestionsContainer[0].scrollHeight;if(containerScrollTop + containerHeight >= containerScrollHeight - 5){suggestionsContainer.scrollTop(containerScrollHeight)}else{const topItemPosition = topItem.position();const bottomItemPosition = bottomItem.position();if(topItemPosition && topItemPosition.top < 0){suggestionsContainer.scrollTop(suggestionsContainer.scrollTop()+ topItemPosition.top)}if(bottomItemPosition && bottomItemPosition.top > containerHeight){suggestionsContainer.scrollTop(suggestionsContainer.scrollTop()+ bottomItemPosition.top - containerHeight)}}}}
function generateOutput() {const output = [];let emptyValue = "",team1side = $('#team1side').val(),team2side = team1side === 'blue' ? 'red' : 'blue';if(checkIsNewFormat()){emptyValue = " "}team1side += emptyValue;team2side += emptyValue;let minutes = $('#minutes').val();let seconds = $('#seconds').val();let length = `${minutes}:${seconds}` + emptyValue;let winner = $('#winner').val();let banNums = $('#ChooseBans').val();let t1h = Array.from({length: 5},(_,i)=> getValueById(`t1h${i + 1}`)).map((item,index)=> index !== 4 ? item + emptyValue : item);let t2h = Array.from({length: 5},(_,i)=> getValueById(`t2h${i + 1}`)).map((item,index)=> index !== 4 ? item + emptyValue : item);let t1b = Array.from({length: 5},(_,i)=> getValueById(`t1b${i + 1}`)).map((item,index)=> index !== banNums - 1 ? item + emptyValue : item);let t2b = Array.from({length: 5},(_,i)=> getValueById(`t2b${i + 1}`)).map((item,index)=> index !== banNums - 1 ? item + emptyValue : item);function outputGameResult(){if(checkIsGameInProgress()){checkIsNewFormat()? length = " " : length = "";winner = ""}output.push(`       |team1side=${team1side}|team2side=${team2side}|length=${length}|winner=${winner}`)}function outputHeroPicks(t1h,t2h){output.push(`       <!-- Hero picks -->`);output.push(`       |t1h1=${t1h[0]}|t1h2=${t1h[1]}|t1h3=${t1h[2]}|t1h4=${t1h[3]}|t1h5=${t1h[4]}`);output.push(`       |t2h1=${t2h[0]}|t2h2=${t2h[1]}|t2h3=${t2h[2]}|t2h4=${t2h[3]}|t2h5=${t2h[4]}`)}function outputHeroBans(t1b,t2b){output.push(`       <!-- Hero bans -->`);let t1bLine = '       ',t2bLine = '       ';for(let i = 0;i < $('#ChooseBans').val();i++){t1bLine += `|t1b${i + 1}=${t1b[i]}`;t2bLine += `|t2b${i + 1}=${t2b[i]}`}output.push(t1bLine);output.push(t2bLine)}if(checkIsUltimateBattle()){outputGameResult();outputHeroPicks(t1h,t2h)}if(checkIsOnlyPicks()){outputHeroPicks(t1h,t2h)}if(checkIsOnlyBans()){outputHeroBans(t1b,t2b)}if(checkIsOnlyBanPicks()){outputHeroPicks(t1h,t2h);outputHeroBans(t1b,t2b)}if(noChoose()){outputGameResult();outputHeroPicks(t1h,t2h);outputHeroBans(t1b,t2b)}$('#output').text(output.join('\n'));copyResult()}function getValueById(inputId){const inputText = $(`#${inputId}`).val().toLowerCase();const item = dataArray.find(item => item.text.toLowerCase().includes(inputText));return item ? item.value : ''}function copyResult(){const outputText = $('#output').text();const textArea = $('<textarea>').val(outputText).appendTo('body');textArea.select();document.execCommand('copy');textArea.remove()}function checkIsUltimateBattle(){return $("#isUltimateBattle").prop('checked')}function checkIsOnlyBans(){return $("#isOnlyBans").prop('checked')}function checkIsOnlyPicks(){return $("#isOnlyPicks").prop('checked')}function checkIsOnlyBanPicks(){return $("#isOnlyBanPicks").prop('checked')}function checkIsGameInProgress(){return $("#isGameInProgress").prop('checked')}function checkIsNewFormat(){return $("#isNewFormat").prop('checked')}function checkIsChangeSide(){return $("#isChangeSide").prop('checked')}function checkCookieForChoose(){if(Cookies.get('isNewFormat')!== undefined){$('#isNewFormat').prop('checked',Cookies.get('isNewFormat')=== 'true')}if(Cookies.get('isChangeSide')!== undefined){$('#isChangeSide').prop('checked',Cookies.get('isChangeSide')=== 'true')}}function checkToolbox(){if(checkIsUltimateBattle()){$('#BPDiv1').show();$('#BPDiv2').show();$('#BPDiv3').hide();$('#BPDiv4').hide()}else if(checkIsOnlyBans()){$('#BPDiv1').hide();$('#BPDiv2').hide();$('#BPDiv3').show();$('#BPDiv4').show()}else if(checkIsOnlyPicks()){$('#BPDiv1').show();$('#BPDiv2').show();$('#BPDiv3').hide();$('#BPDiv4').hide()}else if(checkIsOnlyBanPicks()){showAll()}else{showAll()}}function ShowBanNum(){const banNum = $('#ChooseBans').val();for(let i = 1;i <= 5;i++){if(i <= banNum){$(`#t1b${i}`).show();$(`#t2b${i}`).show()}else{$(`#t1b${i}`).hide();$(`#t2b${i}`).hide()}}}function showAll(){$('#BPDiv1').show();$('#BPDiv2').show();$('#BPDiv3').show();$('#BPDiv4').show()}function noChoose(){checkCookieForChoose();return !checkIsUltimateBattle()&& !checkIsOnlyBans()&& !checkIsOnlyPicks()&& !checkIsOnlyBanPicks()}function bindInputClickSelect(){$('#inputs-container input[type="text"]').off('click.selectInput').on('click.selectInput',function(){$(this).select()})}const originalRenderInputGroups = function(){originalRenderInputGroups();bindInputClickSelect()};